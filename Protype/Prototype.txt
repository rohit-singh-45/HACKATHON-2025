import React, { useEffect, useState, useRef } from "react";

// Firebase Imports
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { 
    getFirestore, 
    collection, 
    addDoc, 
    onSnapshot, 
    updateDoc, 
    doc, 
    increment, 
    query as firestoreQuery, 
    getDocs, 
    limit,
    setLogLevel
} from 'firebase/firestore';


// This is a complete, single-file React application.
// It combines the original portal features with the Firebase-backed consumer dashboard.
export default function App() {
  // --- STATE MANAGEMENT ---
  
  // State for original portal features
  const [view, setView] = useState("dashboard"); // Default to the new strategic dashboard
  const [query, setQuery] = useState("");
  const [reports, setReports] = useState(() => {
    try {
      return JSON.parse(localStorage.getItem("wm_reports") || "[]");
    } catch (e) {
      return [];
    }
  });
  const [mrfCenters] = useState([
    { id: 1, name: "MRF - North Bhubaneswar", lat: 20.32, lng: 85.82, addr: "KIIT Area" },
    { id: 2, name: "MRF - Central Depot", lat: 20.27, lng: 85.84, addr: "Saheed Nagar" },
    { id: 3, name: "MRF - South Park", lat: 20.23, lng: 85.81, addr: "Old Town" },
    { id: 4, name: "Micro Composition Center", lat: 20.2463686, lng: 85.8552749, addr: "Near Lingaraj Temple Road" },
  ]);
  const [selectedCenter, setSelectedCenter] = useState(mrfCenters[0]);
  const [vehiclePos, setVehiclePos] = useState(null);
  const [tracking, setTracking] = useState(false);
  const watchIdRef = useRef(null);

  // State for the Operations (previously dashboard) view
  const [consumers, setConsumers] = useState([]);
  const [isLoading, setIsLoading] = useState(true); 
  const [searchId, setSearchId] = useState("");
  const [logMessages, setLogMessages] = useState([]);
  const [isFirebaseReady, setIsFirebaseReady] = useState(false);
  const [operatorId, setOperatorId] = useState(null);
  const consumerCollectionRef = useRef(null);
  const dbRef = useRef(null);

  // State for controlled "Add Consumer" form
  const [consumerIdInput, setConsumerIdInput] = useState("");
  const [consumerNameInput, setConsumerNameInput] = useState("");
  const [formMessage, setFormMessage] = useState({ text: "", type: "" });

  // State for Shopping feature
  const [products] = useState([
    { id: 'p1', name: 'Home Compost Kit', price: 799, image: 'https://placehold.co/400x400/22c55e/ffffff?text=Compost+Kit' },
    { id: 'p2', name: 'Biodegradable Kitchen Bags (100 pcs)', price: 199, image: 'https://placehold.co/400x400/22c55e/ffffff?text=Bio+Bags' },
    { id: 'p3', name: 'Air Purifying Plant (Snake Plant)', price: 249, image: 'https://placehold.co/400x400/22c55e/ffffff?text=Plant' },
    { id: 'p4', name: 'Set of 3 Recycled Paper Journals', price: 349, image: 'https://placehold.co/400x400/22c55e/ffffff?text=Journals' },
  ]);
  const [cart, setCart] = useState([]);

  // State for Scan feature
  const [scanImage, setScanImage] = useState(null);
  const [scanResult, setScanResult] = useState("");
  const [isScanning, setIsScanning] = useState(false);
  const [scanError, setScanError] = useState("");
  const fileInputRef = useRef(null);


  // --- CONFIGURATION ---
  const INCENTIVE_AMOUNT = 5;
  const PENALTY_AMOUNT = 100;
  
  // These variables are provided by the environment.
  const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-waste-app-react';
  const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
  const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
  const apiKey = ""; // API key is handled by the environment

  // --- FIREBASE INITIALIZATION & AUTHENTICATION EFFECT ---
  useEffect(() => {
    try {
        setLogLevel('debug');
        const app = initializeApp(firebaseConfig);
        dbRef.current = getFirestore(app);
        const auth = getAuth(app);

        const unsubscribe = onAuthStateChanged(auth, async (user) => {
            if (user) {
                setOperatorId(user.uid);
                const userConsumersPath = `/artifacts/${appId}/users/${user.uid}/consumers`;
                consumerCollectionRef.current = collection(dbRef.current, userConsumersPath);
                setIsFirebaseReady(true);
                logAction("Firebase connected, operator authenticated.");
            } else {
                 if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                 } else {
                    await signInAnonymously(auth);
                 }
            }
        });
        return () => unsubscribe(); // Cleanup listener on unmount
    } catch (error) {
        console.error("Firebase Initialization Error:", error);
        logAction("Error: Could not connect to Firebase.");
        setIsLoading(false);
    }
  }, []); 


  // --- FIREBASE DATA LISTENER EFFECT ---
  useEffect(() => {
    if (!isFirebaseReady || !consumerCollectionRef.current) return;

    // Function to add the initial consumers if the collection is empty
    const addInitialConsumers = async () => {
         const q = firestoreQuery(consumerCollectionRef.current, limit(1));
         const snapshot = await getDocs(q);
         if (snapshot.empty) {
             try {
                await addDoc(consumerCollectionRef.current, { consumerId: "1234", name: "Rohan", incentive: 0, penalty: 0, createdAt: new Date() });
                await addDoc(consumerCollectionRef.current, { consumerId: "4545", name: "Rehann", incentive: 10, penalty: 0, createdAt: new Date() });
                logAction("Added initial consumers 'Rohan' and 'Rehann'.");
             } catch (e) { console.error("Could not add initial consumers:", e); }
         }
    };
    addInitialConsumers();

    const unsubscribe = onSnapshot(consumerCollectionRef.current, (snapshot) => {
        const consumerData = snapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));
        consumerData.sort((a, b) => (a.createdAt?.toDate?.() || 0) - (b.createdAt?.toDate?.() || 0));
        setConsumers(consumerData);
        setIsLoading(false);
    }, (error) => {
        console.error("Snapshot listener error:", error);
        logAction("Error fetching consumer data.");
        setIsLoading(false);
    });

    return () => unsubscribe();
  }, [isFirebaseReady]); 


  // --- LOCALSTORAGE EFFECT FOR REPORTS ---
  useEffect(() => {
    localStorage.setItem("wm_reports", JSON.stringify(reports));
  }, [reports]);


  // --- HELPER & EVENT HANDLER FUNCTIONS ---

  const logAction = (message) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogMessages(prevLogs => [`[${timestamp}] ${message}`, ...prevLogs].slice(0, 20));
  };

  const handleConsumerIdChange = (e) => {
      const enteredId = e.target.value;
      setConsumerIdInput(enteredId);
      const foundConsumer = consumers.find(c => c.consumerId.toLowerCase() === enteredId.toLowerCase().trim());
      
      if (foundConsumer) {
          setConsumerNameInput(foundConsumer.name);
          setFormMessage({ text: `✓ Consumer '${foundConsumer.name}' found.`, type: 'success' });
      } else {
          setConsumerNameInput("");
          setFormMessage(enteredId ? { text: "Ready to add new consumer.", type: 'info' } : { text: "", type: "" });
      }
  };

  const handleAddConsumer = async (e) => {
    e.preventDefault();
    const consumerId = consumerIdInput.trim();
    const consumerName = consumerNameInput.trim();

    if (!consumerId || !consumerName) {
        setFormMessage({ text: "Error: Both Consumer ID and Name are required.", type: 'error' });
        return;
    }
    
    if (consumers.some(c => c.consumerId.toLowerCase() === consumerId.toLowerCase())) {
        setFormMessage({ text: `Error: Consumer with ID ${consumerId} already exists.`, type: 'error' });
        logAction(`Error: Attempted to add duplicate ID ${consumerId}.`);
        return;
    }

    if (consumerCollectionRef.current) {
        try {
            await addDoc(consumerCollectionRef.current, { consumerId, name: consumerName, incentive: 0, penalty: 0, createdAt: new Date() });
            logAction(`Added consumer: ${consumerName} (${consumerId})`);
            setConsumerIdInput("");
            setConsumerNameInput("");
            setFormMessage({ text: `Successfully added ${consumerName}.`, type: 'success' });
        } catch (error) {
            console.error("Error adding consumer: ", error);
            setFormMessage({ text: "Error: Could not add consumer to database.", type: 'error' });
        }
    }
  };
  
  const isConsumerFound = consumers.some(c => c.consumerId.toLowerCase() === consumerIdInput.toLowerCase().trim());

  const handleCollection = async (docId, name, action) => {
      try {
          const consumerDocRef = doc(dbRef.current, consumerCollectionRef.current.path, docId);
          if (action === 'accept') {
              await updateDoc(consumerDocRef, { incentive: increment(INCENTIVE_AMOUNT) });
              logAction(`Incentive (+${INCENTIVE_AMOUNT}) for ${name}.`);
          } else if (action === 'reject') {
              await updateDoc(consumerDocRef, { penalty: increment(PENALTY_AMOUNT) });
              logAction(`Penalty (+${PENALTY_AMOUNT}) for ${name}.`);
          }
      } catch (error) { console.error(`Error handling collection for ${docId}:`, error); }
  };

  // --- Scan Feature Logic ---
  const handleImageFileChange = (e) => {
      const file = e.target.files[0];
      if (file) {
          setScanResult("");
          setScanError("");
          const reader = new FileReader();
          reader.onloadend = () => {
              setScanImage(reader.result);
              analyzeImage(reader.result);
          };
          reader.readAsDataURL(file);
      }
  };

  const analyzeImage = async (base64ImageData) => {
      setIsScanning(true);
      const base64Data = base64ImageData.split(',')[1];
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

      const payload = {
          contents: [{
              parts: [
                  { text: "Analyze this image of a piece of waste. Identify the item and classify it into one of these categories: Wet Waste (Biodegradable), Dry Waste (Recyclable), Sanitary Waste, or E-Waste. Provide a brief, one-sentence description of how to dispose of it properly. Format the output as: Item: [Item Name], Category: [Category Name], Disposal: [Disposal Instructions]." },
                  { inlineData: { mimeType: "image/jpeg", data: base64Data } }
              ]
          }],
      };

      try {
          const response = await fetch(apiUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
          });
          const result = await response.json();
          if (result.candidates && result.candidates.length > 0) {
              const text = result.candidates[0].content.parts[0].text;
              setScanResult(text);
          } else {
              setScanError("Analysis failed. The AI could not identify the object.");
          }
      } catch (error) {
          console.error("AI analysis error:", error);
          setScanError("An error occurred while contacting the analysis service.");
      } finally {
          setIsScanning(false);
      }
  };


  // --- Other handlers (tracking, shopping, etc.) ---
  function addReport(e) { 
      e.preventDefault();
      const form = e.target;
      const title = form.title.value.trim();
      const desc = form.desc.value.trim();
      if (!title) return; 
      const newR = { id: Date.now(), title, desc, at: new Date().toISOString() };
      setReports((s) => [newR, ...s]);
      form.reset();
      setView("reports");
  }

  function startTracking() { 
      if (!navigator.geolocation) { // simulate
      setTracking(true);
      let t = 0;
      const sim = setInterval(() => {
        t += 1;
        setVehiclePos({ lat: 20.2961 + t * 0.0005, lng: 85.8245 + t * 0.0007, ts: new Date().toISOString() });
        if (t > 60) clearInterval(sim);
      }, 2000);
      watchIdRef.current = sim;
      return;
    }
    setTracking(true);
    const id = navigator.geolocation.watchPosition(
      (pos) => setVehiclePos({ lat: pos.coords.latitude, lng: pos.coords.longitude, ts: new Date().toISOString() }),
      (err) => {
        console.error(err);
        setTracking(false);
        startTracking(); // Fallback to simulation
      },
      { enableHighAccuracy: true, maximumAge: 2000, timeout: 10000 }
    );
    watchIdRef.current = id;
  }
  function stopTracking() { 
      setTracking(false);
    if (navigator.geolocation && typeof watchIdRef.current === "number") {
      navigator.geolocation.clearWatch(watchIdRef.current);
    } else if (watchIdRef.current) {
      clearInterval(watchIdRef.current);
    }
    watchIdRef.current = null;
  }
  
  const handleAddToCart = (productToAdd) => { 
      setCart(prevCart => {
      const existingItem = prevCart.find(item => item.id === productToAdd.id);
      if (existingItem) {
        return prevCart.map(item => 
          item.id === productToAdd.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        return [...prevCart, { ...productToAdd, quantity: 1 }];
      }
    });
  };

  const cartTotal = cart.reduce((total, item) => total + item.price * item.quantity, 0);
  const filteredMrfCenters = mrfCenters.filter((c) => c.name.toLowerCase().includes(query.toLowerCase()) || c.addr.toLowerCase().includes(query.toLowerCase()));
  const filteredConsumers = consumers.filter(consumer => consumer.consumerId.toLowerCase().includes(searchId.toLowerCase()) || consumer.name.toLowerCase().includes(searchId.toLowerCase()));
  const getFormMessageStyle = () => { 
      switch (formMessage.type) {
      case 'success': return 'text-green-600';
      case 'error': return 'text-red-600';
      case 'info': return 'text-blue-600';
      default: return 'text-gray-500';
    }
  };
  
  // --- Components for new Dashboard ---
  const StatCard = ({ title, value, change, icon }) => (
    <div className="bg-white p-4 rounded-lg shadow flex items-center">
      <div className={`p-3 rounded-full mr-4 ${icon.bgColor}`}>
        {icon.svg}
      </div>
      <div>
        <p className="text-sm text-gray-500">{title}</p>
        <p className="text-2xl font-bold">{value}</p>
        <p className={`text-xs ${change.color}`}>{change.text}</p>
      </div>
    </div>
  );

  const WasteCompositionChart = () => {
    const data = [
      { name: 'Organic', value: 62, color: '#34D399' },
      { name: 'Recyclable', value: 28, color: '#60A5FA' },
      { name: 'Other', value: 10, color: '#F87171' },
    ];
    const total = data.reduce((sum, item) => sum + item.value, 0);

    return (
      <div className="bg-white p-4 rounded-lg shadow">
        <h3 className="font-semibold mb-2">Waste Composition</h3>
        <div className="w-full">
          <div className="flex w-full h-8 rounded-full overflow-hidden">
            {data.map(item => (
              <div key={item.name} style={{ width: `${(item.value / total) * 100}%`, backgroundColor: item.color }} title={`${item.name}: ${item.value}%`}></div>
            ))}
          </div>
          <div className="flex justify-around mt-3 text-xs">
            {data.map(item => (
              <div key={item.name} className="flex items-center">
                <span className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: item.color }}></span>
                <span>{item.name} ({item.value}%)</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };
  
  const CollectionTrendsChart = () => {
    const data = [
      { day: 'Mon', value: 2.1 }, { day: 'Tue', value: 2.5 }, { day: 'Wed', value: 2.2 },
      { day: 'Thu', value: 2.8 }, { day: 'Fri', value: 3.1 }, { day: 'Sat', value: 3.5 }, { day: 'Sun', value: 3.2 }
    ];
    const maxVal = 5; // Math.max(...data.map(d => d.value)) + 1;
    const width = 300, height = 150, padding = 20;
    const points = data.map((d, i) => {
        const x = (i / (data.length - 1)) * (width - 2*padding) + padding;
        const y = height - (d.value / maxVal) * (height - 2*padding) - padding;
        return `${x},${y}`;
    }).join(' ');

    return (
      <div className="bg-white p-4 rounded-lg shadow">
        <h3 className="font-semibold mb-2">Waste Collection Trends (Last 7 Days)</h3>
        <svg viewBox={`0 0 ${width} ${height}`} className="w-full h-auto">
          <polyline fill="none" stroke="#60A5FA" strokeWidth="2" points={points} />
          {data.map((d, i) => {
              const x = (i / (data.length - 1)) * (width - 2*padding) + padding;
              const y = height - (d.value / maxVal) * (height - 2*padding) - padding;
              return <circle key={i} cx={x} cy={y} r="3" fill="#60A5FA" />;
          })}
           <g className="text-[8px] fill-gray-500">
             {data.map((d, i) => {
                const x = (i / (data.length - 1)) * (width - 2*padding) + padding;
                return <text key={i} x={x} y={height - 5} textAnchor="middle">{d.day}</text>;
            })}
           </g>
        </svg>
        <p className="text-xs text-center text-gray-500 mt-1">Collection in Tons</p>
      </div>
    );
  };


  // --- JSX RENDER ---
  return (
    <div className="min-h-screen bg-gray-50 text-gray-800 font-sans">
      <nav className="bg-white shadow sticky top-0 z-20">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-green-500 flex items-center justify-center text-white font-bold">WM</div>
            <div>
              <div className="font-bold text-lg">Waste Management Portal</div>
              <div className="text-xs text-gray-500">Bhubaneswar • Clean • Track • Report</div>
            </div>
          </div>
          <div className="flex items-center gap-1 md:gap-2 flex-wrap">
            <button className={`px-3 py-2 text-sm rounded hover:bg-green-50 ${view === 'dashboard' ? 'bg-green-100 text-green-800 font-semibold' : ''}`} onClick={() => setView('dashboard')}>Dashboard</button>
            <button className={`px-3 py-2 text-sm rounded hover:bg-green-50 ${view === 'operations' ? 'bg-green-100 text-green-800 font-semibold' : ''}`} onClick={() => setView('operations')}>Operations</button>
            <button className={`px-3 py-2 text-sm rounded hover:bg-green-50 ${view === 'learn' ? 'bg-green-100 text-green-800 font-semibold' : ''}`} onClick={() => setView('learn')}>Learn</button>
            <button className={`px-3 py-2 text-sm rounded hover:bg-green-50 ${view === 'scan' ? 'bg-green-100 text-green-800 font-semibold' : ''}`} onClick={() => setView('scan')}>Scan</button>
            <button className={`px-3 py-2 text-sm rounded hover:bg-green-50 ${view === 'shopping' ? 'bg-green-100 text-green-800 font-semibold' : ''}`} onClick={() => setView('shopping')}>Shopping</button>
            <button className={`px-3 py-2 text-sm rounded hover:bg-green-50 ${view === 'centers' ? 'bg-green-100 text-green-800 font-semibold' : ''}`} onClick={() => setView('centers')}>MRF Centers</button>
            <button className={`px-3 py-2 text-sm rounded hover:bg-green-50 ${view === 'reports' ? 'bg-green-100 text-green-800 font-semibold' : ''}`} onClick={() => setView('reports')}>Reports</button>
            <button className={`px-3 py-2 text-sm rounded hover:bg-green-50 ${view === 'track' ? 'bg-green-100 text-green-800 font-semibold' : ''}`} onClick={() => setView('track')}>Vehicle Tracking</button>
          </div>
        </div>
      </nav>

      <main className="max-w-6xl mx-auto p-4">
        {view === 'dashboard' && (
             <section>
                <header className="mb-6">
                    <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">City Waste Management Overview</h1>
                    <p className="text-gray-500 mt-1">Real-time stats and trends for Bhubaneswar.</p>
                </header>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <StatCard title="Total Waste Collected" value="24.5k Tons" change={{ text: '↑ 2.1% vs last month', color: 'text-green-600' }} icon={{ bgColor: 'bg-blue-100', svg: <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" /></svg>}} />
                    <StatCard title="Recycling Rate" value="38.2%" change={{ text: '↑ 5.5% vs last month', color: 'text-green-600' }} icon={{ bgColor: 'bg-green-100', svg: <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h5M20 20v-5h-5M4 4l16 16" /></svg>}} />
                    <StatCard title="Households Served" value="1.2M" change={{ text: '99.8% coverage', color: 'text-gray-600' }} icon={{ bgColor: 'bg-indigo-100', svg: <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" /></svg>}} />
                    <StatCard title="Reported Issues" value="14" change={{ text: '↓ 3 since yesterday', color: 'text-green-600' }} icon={{ bgColor: 'bg-red-100', svg: <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>}} />
                </div>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 mt-4">
                    <WasteCompositionChart />
                    <CollectionTrendsChart />
                </div>
            </section>
        )}
        
        {view === 'operations' && (
            <section>
                 <header className="mb-6 text-center">
                    <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">Operational Dashboard</h1>
                    <p className="text-gray-500 mt-1">Manage consumer incentives and penalties for waste disposal.</p>
                     <div className={`mt-2 text-xs break-all ${isFirebaseReady ? 'text-green-600' : 'text-blue-500'}`}>
                        {operatorId ? `Operator ID: ${operatorId}` : 'Connecting...'}
                    </div>
                </header>

                <div className="mb-8 p-4 bg-white rounded-lg shadow">
                    <form onSubmit={handleAddConsumer} className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <input name="consumerId" placeholder="Consumer ID (e.g., 1234)" className="sm:col-span-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500" required value={consumerIdInput} onChange={handleConsumerIdChange}/>
                        <input name="consumerName" placeholder="Consumer Name (Auto-fills)" className="sm:col-span-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 bg-gray-50" required value={consumerNameInput} onChange={(e) => setConsumerNameInput(e.target.value)} readOnly={isConsumerFound} />
                        <button type="submit" disabled={isConsumerFound} className="sm:col-span-1 px-6 py-2 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:bg-gray-400 disabled:cursor-not-allowed">Add Consumer</button>
                    </form>
                    {formMessage.text && (<p className={`text-sm mt-2 text-center ${getFormMessageStyle()}`}>{formMessage.text}</p>)}
                </div>

                <div className="mb-6">
                    <input type="text" placeholder="Enter Consumer ID or Name to find..." value={searchId} onChange={(e) => setSearchId(e.target.value)} className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 shadow-sm" />
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    <div className="lg:col-span-2 space-y-4">
                        {isLoading ? (
                            <div className="text-center p-10 bg-white rounded-lg shadow"><p className="text-gray-500">Loading consumer data...</p></div>
                        ) : filteredConsumers.length > 0 ? filteredConsumers.map(consumer => (
                            <div key={consumer.id} className="grid grid-cols-1 md:grid-cols-4 gap-4 items-center p-4 bg-white rounded-lg shadow">
                                <div className="md:col-span-2">
                                    <p className="font-bold text-lg text-gray-800">{consumer.name}</p>
                                    <p className="text-sm text-gray-500">ID: {consumer.consumerId}</p>
                                </div>
                                <div className="flex gap-4 text-center">
                                    <div><p className="text-xs text-green-500 font-semibold">INCENTIVE</p><p className="text-xl font-bold">₹{consumer.incentive}</p></div>
                                    <div><p className="text-xs text-red-500 font-semibold">PENALTY</p><p className="text-xl font-bold">₹{consumer.penalty}</p></div>
                                </div>
                                <div className="md:col-span-1 flex flex-col sm:flex-row md:flex-col gap-2 justify-end">
                                    <button onClick={() => handleCollection(consumer.id, consumer.name, 'accept')} className="px-4 py-2 bg-green-500 text-white font-semibold text-sm rounded-md hover:bg-green-600">Accept Garbage</button>
                                    <button onClick={() => handleCollection(consumer.id, consumer.name, 'reject')} className="px-4 py-2 bg-red-500 text-white font-semibold text-sm rounded-md hover:bg-red-600">Reject Garbage</button>
                                </div>
                            </div>
                        )) : <div className="text-center p-5 bg-white rounded-lg shadow"><p>No matching consumers found.</p></div>}
                    </div>
                    <aside className="lg:col-span-1 bg-white rounded-lg shadow p-4">
                        <h3 className="font-semibold text-lg text-gray-800 mb-2">Recent Activity</h3>
                        <ul className="space-y-2 text-sm text-gray-600 h-96 overflow-y-auto">
                            {logMessages.map((msg, i) => <li key={i}>{msg}</li>)}
                        </ul>
                    </aside>
                </div>
            </section>
        )}

        {view === 'learn' && (
            <section>
                <header className="mb-6 text-center">
                    <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">Learn About Waste Management</h1>
                    <p className="text-gray-500 mt-1">Knowledge is the first step towards a cleaner city.</p>
                </header>
                <div className="space-y-6">
                    <div className="p-6 bg-white rounded-lg shadow">
                        <h2 className="text-xl font-semibold text-green-700 mb-3">Waste Segregation: The Four Bins</h2>
                        <p className="text-gray-600 mb-4">Proper segregation at home is crucial. It ensures that waste is processed correctly, maximizing recycling and minimizing landfill. Here is the standard color code:</p>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-center">
                            <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                                <p className="text-4xl">🟢</p><h3 className="font-bold mt-2">Green Bin: Wet Waste</h3><p className="text-sm text-gray-500">Cooked food, fruit/veg peels, tea bags, garden waste.</p>
                            </div>
                            <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                                <p className="text-4xl">🔵</p><h3 className="font-bold mt-2">Blue Bin: Dry Waste</h3><p className="text-sm text-gray-500">Plastic bottles, paper, cardboard, glass, metal cans.</p>
                            </div>
                            <div className="p-4 bg-red-50 rounded-lg border border-red-200">
                                <p className="text-4xl">🔴</p><h3 className="font-bold mt-2">Red Bin: Sanitary Waste</h3><p className="text-sm text-gray-500">Diapers, sanitary pads, bandages, masks. Wrap securely in paper.</p>
                            </div>
                            <div className="p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                                <p className="text-4xl">⚫️</p><h3 className="font-bold mt-2">Black Bin: E-Waste</h3><p className="text-sm text-gray-500">Old batteries, cables, CFL bulbs, electronic toys. Drop at collection centers.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="p-6 bg-white rounded-lg shadow">
                            <h2 className="text-xl font-semibold text-blue-700 mb-3">Waste Treatment Methods</h2>
                            <ul className="space-y-3 text-gray-600">
                                <li><strong>Composting:</strong> Wet waste can be turned into nutrient-rich compost for your plants. Use a home compost kit or give it to your local composting facility.</li>
                                <li><strong>Recycling:</strong> Dry waste like paper, plastic, and metal is sent to Material Recovery Facilities (MRFs) to be processed and made into new products, saving resources.</li>
                            </ul>
                        </div>
                        <div className="p-6 bg-white rounded-lg shadow">
                            <h2 className="text-xl font-semibold text-yellow-700 mb-3">Public Sanitation Best Practices</h2>
                             <ul className="space-y-3 text-gray-600 list-disc list-inside">
                                <li>Do not litter in public spaces. Use designated bins.</li>
                                <li>Report any garbage dumping sites using the "Reports" tab.</li>
                                <li>Keep your community drains clean to prevent waterlogging.</li>
                                <li>Encourage neighbours to practice proper waste segregation.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </section>
        )}
        
        {view === 'scan' && (
            <section>
                <header className="mb-6 text-center">
                    <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">AI Waste Scanner</h1>
                    <p className="text-gray-500 mt-1">Scan any piece of garbage to learn how to dispose of it correctly.</p>
                </header>
                <div className="max-w-2xl mx-auto bg-white p-6 rounded-lg shadow">
                    <input type="file" accept="image/*" capture="environment" ref={fileInputRef} onChange={handleImageFileChange} className="hidden" />
                    <button onClick={() => fileInputRef.current.click()} className="w-full py-3 px-4 bg-blue-600 text-white font-bold rounded-lg text-center hover:bg-blue-700 transition duration-300">
                        {scanImage ? 'Scan Another Item' : 'Scan with Camera'}
                    </button>
                    
                    <div className="mt-6">
                        {isScanning && (
                            <div className="text-center p-4">
                                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
                                <p className="mt-3 text-gray-600">Analyzing image...</p>
                            </div>
                        )}
                        {scanError && <p className="text-red-500 text-center">{scanError}</p>}
                        {scanResult && !isScanning && (
                            <div className="p-4 bg-gray-50 rounded-lg border">
                                {scanImage && <img src={scanImage} alt="Scanned waste" className="max-w-xs mx-auto rounded-lg mb-4" />}
                                <div className="space-y-2">
                                    {scanResult.split(',').map((part, index) => {
                                        const [key, ...value] = part.split(':');
                                        return (
                                            <div key={index}>
                                                <span className="font-bold">{key.trim()}:</span>
                                                <span className="text-gray-700 ml-2">{value.join(':').trim()}</span>
                                            </div>
                                        );
                                    })}
                                </div>
                            </div>
                        )}
                         {!scanImage && !isScanning && (
                            <div className="text-center text-gray-500 mt-6 p-4 border-2 border-dashed rounded-lg">
                                <p>Point your camera at a single item of waste and take a picture to get disposal instructions.</p>
                            </div>
                         )}
                    </div>
                </div>
            </section>
        )}

        {view === 'shopping' && (
             <section>
                <header className="mb-6 text-center">
                    <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">Shop for Green Utilities</h1>
                    <p className="text-gray-500 mt-1">Purchase items to support a sustainable lifestyle.</p>
                </header>
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    <div className="lg:col-span-2 bg-white p-4 rounded-lg shadow">
                         <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            {products.map(product => (
                                <div key={product.id} className="border rounded-lg overflow-hidden flex flex-col">
                                    <img src={product.image} alt={product.name} className="w-full h-48 object-cover" />
                                    <div className="p-4 flex flex-col flex-grow">
                                        <h3 className="font-semibold text-lg">{product.name}</h3>
                                        <p className="text-gray-600 mt-auto pt-2 text-xl font-bold">₹{product.price}</p>
                                        <button onClick={() => handleAddToCart(product)} className="mt-2 w-full px-4 py-2 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700">Add to Cart</button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                    <aside className="lg:col-span-1 bg-white rounded-lg shadow p-4">
                        <h3 className="font-semibold text-lg text-gray-800 mb-2">Your Cart</h3>
                        {cart.length === 0 ? (
                            <p className="text-sm text-gray-500">Your cart is empty.</p>
                        ) : (
                            <div className="flex flex-col h-full">
                                <ul className="space-y-3 flex-grow">
                                    {cart.map(item => (
                                        <li key={item.id} className="flex justify-between items-center text-sm">
                                            <div>
                                                <p className="font-medium">{item.name}</p>
                                                <p className="text-gray-500">₹{item.price} x {item.quantity}</p>
                                            </div>
                                            <p className="font-semibold">₹{item.price * item.quantity}</p>
                                        </li>
                                    ))}
                                </ul>
                                <div className="border-t pt-4 mt-4">
                                    <div className="flex justify-between font-bold text-lg">
                                        <span>Total</span>
                                        <span>₹{cartTotal}</span>
                                    </div>
                                    <button onClick={() => { alert('This is a demo. No real transaction will be made.'); setCart([]); }} className="mt-4 w-full py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700">Checkout</button>
                                </div>
                            </div>
                        )}
                    </aside>
                </div>
            </section>
        )}
        
        {view === 'centers' && (
           <section className="grid md:grid-cols-3 gap-4">
             <div className="md:col-span-2 bg-white rounded shadow p-4">
                <h2 className="text-xl font-semibold mb-2">MRF Centers</h2>
                 <div className="grid gap-2">
                     {mrfCenters.map((c) => (
                         <div key={c.id} className="p-3 border rounded flex justify-between items-center">
                             <div>
                                <p className="font-medium">{c.name}</p>
                                <p className="text-xs text-gray-500">{c.addr}</p>
                            </div>
                            <div className="flex gap-2">
                                <button onClick={() => setSelectedCenter(c)} className="px-3 py-1 border rounded text-sm hover:bg-gray-100">View on Map</button>
                                <a className="px-3 py-1 rounded bg-green-600 text-white text-sm" href={`https://www.google.com/maps/search/?api=1&query=${c.lat},${c.lng}`} target="_blank" rel="noreferrer">Directions</a>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
            <aside className="bg-white rounded shadow p-4">
                <h4 className="font-medium">Selected Center</h4>
                <div className="mt-2">
                    <p className="font-semibold">{selectedCenter.name}</p>
                    <p className="text-xs text-gray-500">{selectedCenter.addr}</p>
                    <div className="mt-2 border rounded overflow-hidden">
                        <iframe title="center-map" src={`https://www.openstreetmap.org/export/embed.html?bbox=${selectedCenter.lng - 0.01}%2C${selectedCenter.lat - 0.007}%2C${selectedCenter.lng + 0.01}%2C${selectedCenter.lat + 0.007}&layer=mapnik&marker=${selectedCenter.lat}%2C${selectedCenter.lng}`} style={{ width: "100%", height: 220, border: 0 }}/>
                    </div>
                </div>
            </aside>
          </section>
        )}

        {view === 'reports' && (
           <section className="bg-white rounded shadow p-4">
            <h2 className="text-xl font-semibold mb-2">Submit or View Reports</h2>
             <div className="grid md:grid-cols-2 gap-6">
                <div>
                     <h3 className="font-medium mb-2">New Report</h3>
                     <form onSubmit={addReport} className="grid gap-2">
                        <input name="title" placeholder="Short title (e.g., Overflowing bin)" className="border rounded px-3 py-2" required />
                        <textarea name="desc" placeholder="Describe the issue and location" className="border rounded px-3 py-2" rows={4}></textarea>
                        <div className="flex gap-2">
                            <button type="submit" className="px-3 py-2 bg-green-600 text-white rounded">Submit Report</button>
                        </div>
                    </form>
                </div>
                 <div>
                     <h3 className="font-medium mb-2">Submitted Reports</h3>
                     {reports.length === 0 ? (
                      <div className="text-sm text-gray-500 p-3 border rounded">No reports yet.</div>
                    ) : (
                      <div className="grid gap-2 max-h-96 overflow-y-auto">
                        {reports.map((r) => (
                          <div key={r.id} className="p-3 border rounded bg-gray-50">
                            <p className="font-medium">{r.title}</p>
                            <p className="text-xs text-gray-500">{new Date(r.at).toLocaleString()}</p>
                            <p className="mt-1 text-sm">{r.desc}</p>
                          </div>
                        ))}
                      </div>
                    )}
                 </div>
             </div>
          </section>
        )}
        
        {view === 'track' && (
          <section className="grid md:grid-cols-3 gap-4">
             <div className="md:col-span-2 bg-white rounded shadow p-4">
                <h2 className="text-xl font-semibold mb-2">Vehicle Tracking</h2>
                <div className="flex gap-2 mb-3">
                    <button onClick={() => (tracking ? stopTracking() : startTracking())} className={`px-3 py-2 rounded ${tracking ? 'bg-red-500 text-white' : 'bg-green-600 text-white'}`}>
                        {tracking ? 'Stop Tracking' : 'Start Live Tracking'}
                    </button>
                    <button onClick={() => setVehiclePos(null)} className="px-3 py-2 border rounded">Clear Position</button>
                </div>
                <div className="border rounded p-3 min-h-[300px]">
                    {vehiclePos ? (
                        <div>
                            <p className="font-medium">Vehicle Last Known Position</p>
                            <p className="text-sm text-gray-600">Lat: {vehiclePos.lat.toFixed(6)}, Lng: {vehiclePos.lng.toFixed(6)}</p>
                            <p className="text-xs text-gray-500">Updated: {new Date(vehiclePos.ts).toLocaleString()}</p>
                            <div className="mt-3 border rounded overflow-hidden">
                                <iframe title="vehicle-map" src={`https://www.openstreetmap.org/export/embed.html?bbox=${vehiclePos.lng - 0.01}%2C${vehiclePos.lat - 0.007}%2C${vehiclePos.lng + 0.01}%2C${vehiclePos.lat + 0.007}&layer=mapnik&marker=${vehiclePos.lat}%2C${vehiclePos.lng}`} style={{ width: "100%", height: 280, border: 0 }} />
                            </div>
                        </div>
                    ) : (
                        <div className="text-sm text-gray-500 p-4 text-center">No vehicle data. Start tracking to see live position. <br/>(Uses browser geolocation or a simulation if permission is denied).</div>
                    )}
                </div>
            </div>
            <aside id="help" className="bg-white rounded shadow p-4">
                 <h3 className="font-semibold">Help Center</h3>
                 <div className="mt-2">
                     <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                         <div className="w-12 h-12 rounded-full bg-gray-200 flex items-center justify-center text-2xl">📞</div>
                         <div>
                             <p className="font-medium">City Help Desk</p>
                             <p className="text-sm text-gray-600">+91 674 123 4567</p>
                             <p className="text-xs text-gray-500">Mon-Fri 9:00 - 18:00</p>
                         </div>
                     </div>
                     <div className="mt-3 text-sm text-gray-600">If urgent, call the help desk. For non-urgent issues, please use the report form. For operational tasks, use the dashboard.</div>
                 </div>
            </aside>
          </section>
        )}

        <footer className="mt-8 text-center text-xs text-gray-500">© Waste Management Portal - Government of Odisha. Built for demonstration and operational use.</footer>
      </main>
    </div>
  );
}

